import Head from 'next/head';
import { useRouter } from 'next/router';
import { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';
// import { initialBoardState, columns as initialColumns, tasks as initialTasks } from './mockupData';
import { SetStateAction, useEffect, useState } from 'react';
import { getBoardData } from '../../src/store/board/thunkBoard';
import { useAppDispatch, useAppSelector } from '../../src/hooks/hooks';
import { createColumnInBoard } from '../../src/store/board/thunkColumns';
import { createTask } from '../../src/store/board/thunkTasks';
import ModalTaskAdd from '../../src/components/BoardPage/ModalBoardPage/ModalTaskAdd';
import s from '../../src/components/BoardPage/BoardPage.module.scss';
import IFormData from '../../src/components/BoardPage/ModalBoardPage/ModalTaskAdd';

const Board = () => {
  const dispatch = useAppDispatch();
  const router = useRouter();
  const { boardId } = router.query;
  const { columns } = useAppSelector((state) => state.board);
  const [ModalTaskAddState, setModalTaskAddState] = useState<boolean>(false);

  useEffect(() => {

    if (
      boardId === undefined
      || typeof boardId !== 'string'
    ) return;

    dispatch(getBoardData(boardId));
  }, [router]);

  // useEffect(() => {
  //   const { bid } = router.query;

  //   if (!bid) return;

  //   dispatch(GetBoardData(bid));
  // }, [boards]);

  const handleOnDragEnd = (result: any) => {
    if (!result.destination) return;

    // const columnsForEdit = Array.from(columnsState);
    // const [movedColumn] = columnsForEdit.splice(result.source.index, 1);
    // columnsForEdit.splice(result.destination.index, 0, movedColumn);
    // console.log('columnsForEdit: ', columnsForEdit);

    // setColumnsState(columnsForEdit);

    // const tasksCopy = Array.from(tasksState);
    // const [movedColumn] = tasksCopy.splice(result.source.index, 1);
    // tasksCopy.splice(result.destination.index, 0, movedColumn);

    // tasksCopy.forEach((task, index) => {
    //   task.order = index;
    // });

    // setTasksState(tasksCopy);

    const tasksCopy = Array.from(columns.tasks);
    const [movedColumn] = tasksCopy.splice(result.source.index, 1);
    tasksCopy.splice(result.destination.index, 0, movedColumn);

    tasksCopy.forEach((task, index) => {
      task.order = index;
    });

    setTasksState(tasksCopy);
  };

  const handleCardDelete = () => {
    console.log('handleCardDelete: ', handleCardDelete);
  };
  
  const handleColumnAdd = () => {
    // dispatch(createColumnInBoard());
  };

  const handleCardAdd = (e: any) => {

    // dispatch(createTask({
      // boardId: boardId,
      // columnId: 
      // newTaskParams: {
        // title: ,
        // order: ,
        // description: ,
        // userId: number;
        // users: string[];
      // },
    // }));
  };

  const handleKeyDown = (e: any) => {
    e.target.style.height = 'inherit';
    e.target.style.height = `${e.target.scrollHeight + 2}px`;
  };

  return (
    <div className={s.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <h1 className={s.boardHeader}>Board title</h1>
      <div className={s.columnsWrapper}>
        <DragDropContext onDragEnd={handleOnDragEnd}>
          {/* <Droppable droppableId="columns">
            {(provided, snapshot) => ( */}
          <ul
            className={s.columnsList}
            // ref={provided.innerRef}
            // {...provided.droppableProps}
          >
            {columns.map((column, index: number) => (
              // <Draggable
              //   key={column._id}
              //   draggableId={column._id}
              //   index={index}
              // >
              //   {
              //     (provided) => (
              <li
                key={column._id}
                className={s.column}
                // ref={provided.innerRef}
                // {...provided.dragHandleProps}
                // {...provided.draggableProps}
              >
                <div className={s.columnContent}>
                  <div className={s.columnHeader}>
                    <textarea
                      className={s.columnTitleArea}
                      defaultValue={column.title}
                      name=''
                      rows={1}
                      id=''
                      onInput={handleKeyDown}
                    ></textarea>
                    <button className={s.columnDeleteBtn}>X</button>
                  </div>
                  <Droppable droppableId={column._id}>
                    {(provided, snapshot) => (
                      <ul
                        className={s.cardsList}
                        ref={provided.innerRef}
                        {...provided.droppableProps}
                      >
                        {
                          column.tasks && column.tasks
                            .map((task, index) => {
                              return (
                                <Draggable key={task._id} draggableId={task._id} index={index}>
                                  {(provided) => (
                                    <li
                                      key={index}
                                      className={s.card}
                                      ref={provided.innerRef}
                                      {...provided.dragHandleProps}
                                      {...provided.draggableProps}
                                    >
                                      <div className={s.cardText}>{task.title}</div>
                                      <div className={s.cardDeleteBtn} onClick={handleCardDelete}>
                                        X
                                      </div>
                                    </li>
                                  )}
                                </Draggable>
                              );
                            }
                          )
                        }
                        {provided.placeholder}
                      </ul>
                    )}
                  </Droppable>
                  <button
                    className={s.cardAddBtn}
                    onClick={() => {
                      setModalTaskAddState(true);
                    }}
                  >Add card</button>
                </div>
              </li>
              //     )
              //   }
              // </Draggable>
            ))}
            {/* {provided.placeholder} */}
          </ul>
          {/* )}
          </Droppable> */}
        </DragDropContext>
        <div
          className={s.columnAddBtn}
          // onClick={() => {
          //   setModalTaskAddState(true);
          // }}
        >Add Column</div>
        <ModalTaskAdd
          onConfirm={() => {}}
          isShowModal={ModalTaskAddState}
          setIsShowModal={setModalTaskAddState}
        />
      </div>
    </div>
  );
};

export default Board;
